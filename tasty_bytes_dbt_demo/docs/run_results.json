{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-10-06T10:31:52.687988Z", "invocation_id": "06f85ead-e0ac-429b-bd92-b521b2e2eba1", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:48.740325Z", "completed_at": "2025-10-06T10:30:48.752041Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:48.752785Z", "completed_at": "2025-10-06T10:30:49.546442Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.813828706741333, "adapter_response": {}, "message": "Database Error in model new1 (models/marts/new1.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 17 at position 0 unexpected ';'.\n  compiled code at /tmp/dbt/target/run/tasty_bytes/models/marts/new1.sql", "failures": null, "unique_id": "model.tasty_bytes.new1", "compiled": true, "compiled_code": "SELECT\n  c.CUSTOMER_ID,\n  c.FIRST_NAME,\n  c.LAST_NAME,\n  c.E_MAIL,\n  c.PHONE_NUMBER,\n  c.POSTAL_CODE,\n  c.GENDER,\n  c.MARITAL_STATUS,\n  c.SIGN_UP_DATE,\n  ct.CITY,\n  ct.CITY_POPULATION\nFROM TASTY_BYTES_DBT_DB.RAW.CUSTOMER_LOYALTY c\nLEFT JOIN TASTY_BYTES_DBT_DB.RAW.COUNTRY ct ON c.COUNTRY = ct.COUNTRY\n;", "relation_name": "tasty_bytes_dbt_db.dev.new1", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:49.561627Z", "completed_at": "2025-10-06T10:30:49.568358Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:49.568993Z", "completed_at": "2025-10-06T10:30:51.159068Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.598940134048462, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c32a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_customer_customer_loyalty", "compiled": true, "compiled_code": "select *\nfrom tasty_bytes_dbt_db.RAW.CUSTOMER_LOYALTY", "relation_name": "tasty_bytes_dbt_db.dev.raw_customer_customer_loyalty", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:51.164281Z", "completed_at": "2025-10-06T10:30:51.173170Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:51.173758Z", "completed_at": "2025-10-06T10:30:52.432949Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2700731754302979, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c34a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_country", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.COUNTRY", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_country", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:52.437934Z", "completed_at": "2025-10-06T10:30:52.444616Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:52.445227Z", "completed_at": "2025-10-06T10:30:53.490125Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0535829067230225, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c36a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_franchise", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.FRANCHISE", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_franchise", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:53.495108Z", "completed_at": "2025-10-06T10:30:53.503951Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:53.504551Z", "completed_at": "2025-10-06T10:30:54.526141Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0324172973632812, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c38a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_location", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.LOCATION", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_location", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:54.531152Z", "completed_at": "2025-10-06T10:30:54.537610Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:54.538192Z", "completed_at": "2025-10-06T10:30:55.510356Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9805514812469482, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c3aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_menu", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.MENU", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_menu", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:55.515145Z", "completed_at": "2025-10-06T10:30:55.521853Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:55.522439Z", "completed_at": "2025-10-06T10:30:56.453291Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.939483642578125, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c3ca"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_order_detail", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.ORDER_DETAIL", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_order_detail", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:56.458316Z", "completed_at": "2025-10-06T10:30:56.464952Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:56.465554Z", "completed_at": "2025-10-06T10:30:57.699720Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2427642345428467, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c3ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_order_header", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.ORDER_HEADER", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_order_header", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:57.705107Z", "completed_at": "2025-10-06T10:30:57.711618Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:57.712210Z", "completed_at": "2025-10-06T10:30:58.546843Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8431611061096191, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c40a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.raw_pos_truck", "compiled": true, "compiled_code": "SELECT *\nFROM tasty_bytes_dbt_db.RAW.TRUCK", "relation_name": "tasty_bytes_dbt_db.dev.raw_pos_truck", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:30:58.552008Z", "completed_at": "2025-10-06T10:30:58.559059Z"}, {"name": "execute", "started_at": "2025-10-06T10:30:58.559651Z", "completed_at": "2025-10-06T10:31:01.847468Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.2968077659606934, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d6-0206-97c1-0012-dad70003c42a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.customer_loyalty_metrics", "compiled": true, "compiled_code": "SELECT \n    cl.customer_id,\n    cl.city,\n    cl.country,\n    cl.first_name,\n    cl.last_name,\n    cl.phone_number,\n    cl.e_mail,\n    SUM(oh.order_total) AS total_sales,\n    ARRAY_AGG(DISTINCT oh.location_id) AS visited_location_ids_array\nFROM tasty_bytes_dbt_db.dev.raw_customer_customer_loyalty cl\nJOIN tasty_bytes_dbt_db.dev.raw_pos_order_header oh\nON cl.customer_id = oh.customer_id\nGROUP BY cl.customer_id, cl.city, cl.country, cl.first_name,\ncl.last_name, cl.phone_number, cl.e_mail", "relation_name": "tasty_bytes_dbt_db.dev.customer_loyalty_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:31:01.852398Z", "completed_at": "2025-10-06T10:31:01.861002Z"}, {"name": "execute", "started_at": "2025-10-06T10:31:01.861610Z", "completed_at": "2025-10-06T10:31:42.884582Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 41.03353977203369, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d7-0206-97c1-0012-dad70003c44a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.orders", "compiled": true, "compiled_code": "SELECT \n    oh.order_id,\n    oh.truck_id,\n    oh.order_ts,\n    od.order_detail_id,\n    od.line_number,\n    m.truck_brand_name,\n    m.menu_type,\n    t.primary_city,\n    t.region,\n    t.country,\n    t.franchise_flag,\n    t.franchise_id,\n    f.first_name AS franchisee_first_name,\n    f.last_name AS franchisee_last_name,\n    l.location_id,\n    cl.customer_id,\n    cl.first_name,\n    cl.last_name,\n    cl.e_mail,\n    cl.phone_number,\n    cl.children_count,\n    cl.gender,\n    cl.marital_status,\n    od.menu_item_id,\n    m.menu_item_name,\n    od.quantity,\n    od.unit_price,\n    od.price,\n    oh.order_amount,\n    oh.order_tax_amount,\n    oh.order_discount_amount,\n    oh.order_total\nFROM tasty_bytes_dbt_db.dev.raw_pos_order_detail od\nJOIN tasty_bytes_dbt_db.dev.raw_pos_order_header oh\n    ON od.order_id = oh.order_id\nJOIN tasty_bytes_dbt_db.dev.raw_pos_truck t\n    ON oh.truck_id = t.truck_id\nJOIN tasty_bytes_dbt_db.dev.raw_pos_menu m\n    ON od.menu_item_id = m.menu_item_id\nJOIN tasty_bytes_dbt_db.dev.raw_pos_franchise f\n    ON t.franchise_id = f.franchise_id\nJOIN tasty_bytes_dbt_db.dev.raw_pos_location l\n    ON oh.location_id = l.location_id\nLEFT JOIN tasty_bytes_dbt_db.dev.raw_customer_customer_loyalty cl\n    ON oh.customer_id = cl.customer_id", "relation_name": "tasty_bytes_dbt_db.dev.orders", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-06T10:31:42.889812Z", "completed_at": "2025-10-06T10:31:42.925622Z"}, {"name": "execute", "started_at": "2025-10-06T10:31:42.926266Z", "completed_at": "2025-10-06T10:31:52.681478Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 9.79307770729065, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bf86d7-0206-97c1-0012-dad70003c46e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.tasty_bytes.sales_metrics_by_location", "compiled": true, "compiled_code": "from snowflake.snowpark.functions import col, lit, concat, count, sum as sum_, coalesce\n\ndef model(dbt, session):\n    \"\"\"\n    This model demonstrates basic Snowpark transformations using dbt Python models.\n    It joins location data with trucks and aggregates metrics by location.\n    Uses raw_pos models as sources instead of tb_101 directly.\n    \"\"\"\n    # Get tables using dbt's ref function to reference the raw_pos models\n    locations_df = dbt.ref('raw_pos_location')\n    trucks_df = dbt.ref('raw_pos_truck')\n    orders_df = dbt.ref('raw_pos_order_header')\n    \n    # Join locations with trucks to get truck counts by location\n    location_trucks = (\n        trucks_df\n        .join(\n            locations_df, \n            trucks_df[\"PRIMARY_CITY\"] == locations_df[\"CITY\"], \n            \"inner\"\n        )\n        # Use simple column names and case-insensitive approach\n        .select(\n            locations_df[\"LOCATION_ID\"],\n            locations_df[\"LOCATION\"],\n            locations_df[\"CITY\"],\n            trucks_df[\"TRUCK_ID\"]\n        )\n        .groupBy(\"LOCATION_ID\", \"LOCATION\", \"CITY\")\n        .agg(count(\"TRUCK_ID\").alias(\"TRUCK_COUNT\"))\n    )\n    \n    # Join with order data to get sales metrics\n    location_metrics = (\n        orders_df\n        .join(locations_df, \"LOCATION_ID\", \"inner\")\n        .groupBy(\"LOCATION_ID\")\n        .agg(\n            sum_(\"ORDER_TOTAL\").alias(\"TOTAL_SALES\"),\n            sum_(\"ORDER_AMOUNT\").alias(\"TOTAL_AMOUNT\"),\n            sum_(\"ORDER_TAX_AMOUNT\").alias(\"TOTAL_TAX\")\n        )\n    )\n    \n    # Create a more simplified final version\n    joined_df = location_trucks.join(location_metrics, \"LOCATION_ID\", \"left\")\n    \n    # Add the calculated columns after join to avoid column reference issues\n    final_df = (\n        joined_df\n        .select(\n            col(\"LOCATION_ID\"),\n            col(\"LOCATION\"),\n            col(\"CITY\"),\n            col(\"TRUCK_COUNT\"),\n            # Use coalesce instead of fillna for Column objects\n            coalesce(col(\"TOTAL_SALES\"), lit(0)).alias(\"TOTAL_SALES\"),\n            coalesce(col(\"TOTAL_AMOUNT\"), lit(0)).alias(\"TOTAL_AMOUNT\"),\n            coalesce(col(\"TOTAL_TAX\"), lit(0)).alias(\"TOTAL_TAX\")\n        )\n    )\n    \n    # Add the full location description as a separate step\n    final_with_desc = (\n        final_df\n        .withColumn(\n            \"LOCATION_DESCRIPTION\", \n            concat(\n                col(\"CITY\"), \n                lit(\" (Trucks: \"), \n                col(\"TRUCK_COUNT\").cast(\"string\"), \n                lit(\")\")\n            )\n        )\n    )\n    \n    # Return the final dataframe\n    return final_with_desc\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"raw_pos_location\": \"tasty_bytes_dbt_db.dev.raw_pos_location\", \"raw_pos_order_header\": \"tasty_bytes_dbt_db.dev.raw_pos_order_header\", \"raw_pos_truck\": \"tasty_bytes_dbt_db.dev.raw_pos_truck\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"tasty_bytes_dbt_db\"\n    schema = \"dev\"\n    identifier = \"sales_metrics_by_location\"\n    \n    def __repr__(self):\n        return 'tasty_bytes_dbt_db.dev.sales_metrics_by_location'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "relation_name": "tasty_bytes_dbt_db.dev.sales_metrics_by_location", "batch_results": null}], "elapsed_time": 66.2292594909668, "args": {"warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "partial_parse": true, "use_colors_file": true, "require_nested_cumulative_type_params": false, "show_resource_report": false, "exclude": [], "introspect": true, "target": "dev", "write_json": true, "quiet": false, "require_explicit_package_overrides_for_builtin_materializations": true, "profiles_dir": "/tmp/dbt/", "empty": false, "use_colors": true, "state_modified_compare_vars": false, "version_check": true, "target_path": "/tmp/dbt/target/", "defer": false, "skip_nodes_if_on_run_start_fails": false, "favor_state": false, "log_format": "default", "static_parser": true, "cache_selected_only": false, "partial_parse_file_diff": true, "invocation_command": "dbt ", "log_file_max_bytes": 10485760, "log_format_file": "debug", "require_yaml_configuration_for_mf_time_spines": false, "which": "run", "strict_mode": false, "print": true, "printer_width": 80, "log_path": "/tmp/dbt/logs", "state_modified_compare_more_unrendered_values": false, "indirect_selection": "eager", "project_dir": "/tmp/dbt", "log_level": "info", "require_batched_execution_for_custom_microbatch_strategy": false, "log_level_file": "debug", "require_resource_names_without_spaces": false, "send_anonymous_usage_stats": false, "source_freshness_run_project_hooks": false, "vars": {}, "populate_cache": true, "select": []}}